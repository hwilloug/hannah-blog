import SyntaxHighlighter from "react-syntax-highlighter";
import {
  ArticleContentContainer,
  Code,
  FullSizeImage,
  Section,
  SectionHeader,
  SubsectionHeader,
} from "../components/StyledComponents";

const migrationCode = `
"""Add likes to article table

Revision ID: 5b2423dc9d5c
Revises: 239d28898a5f
Create Date: 2024-04-07 14:26:20.671103

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5b2423dc9d5c'
down_revision: Union[str, None] = '239d28898a5f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('articles', sa.Column('likes', sa.Integer(), nullable=False, server_default=str(0)))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('articles', 'likes')
    # ### end Alembic commands ###
`;

const LikingArticles: React.FC = () => {
  return (
    <ArticleContentContainer>
      <Section>
        <SectionHeader>Technical Considerations</SectionHeader>
        <p>
          Here are some things I either needed to figure out a good solution for
          or just didn't know design patterns for yet.
        </p>
        <ol>
          <li>
            How to store the likes in the database while:
            <ol style={{ listStyleType: "lower-alpha" }}>
              <li>
                Allowing anyone to like an article, even if they aren't logged
                in
              </li>
              <li>
                Preventing the same user from liking a post multiple times
              </li>
            </ol>
          </li>
          <li>
            How to prevent overwriting number of likes during high traffic
            periods
          </li>
        </ol>
        <p>
          ChatGPT recommended a few different approaches to the first question:
          a likes table that stores the likes for each post along with the IP
          address of the person who liked the post; or using cookies to keep
          track of which post a user has liked, along with a simple number of
          likes column on the articles table. I figured using cookies would be
          the most simple approach, as well as just better privacy-wise because
          it's not storing the IP addresses of my users. The cookies solution
          would also require some sort of dialog for consent to store a cookie
          on the user's device.
        </p>
        <p>
          As for the second question, ChatGPT recommended a bunch of things I
          don't know how to implement yet: locking mechanisms (maintaining a
          separate table to track locks on rows), transactional processing
          (making a change and then saving it, and if an error occurs, it rolls
          back to the original state), optimistic concurrency control (adding a
          timestamp column and making sure it's the correct value before making
          a change), distributed locking (locking mechanisims provided by AWS).
          Turns out I was already doing transactional processing, but I had
          trouble figuring out what to do with the failed commits. My
          architecture is a distributed system, so I figured there has to be
          some sort of design pattern for implementing this in AWS. After some
          googling, I read about automatic retries with AWS Lambda, and decided
          this would be the best approach for now because I don't really get
          much traffic.
        </p>
      </Section>
      <Section>
        <SectionHeader>Initial Architecture</SectionHeader>
        <FullSizeImage
          src={`${process.env.REACT_APP_IMAGES_BASE_URL}/architecture_diagram_3.jpeg`}
        />
      </Section>
      <Section>
        <SectionHeader>Technical Implementation</SectionHeader>
        <p>
          Based on the above logic, the steps for how I imlemented a "likes"
          system are as follows:
        </p>
        <ol>
          <li>Add a likes column to the articles database</li>
          <li>
            Implement a lambda for increasing or decreasing the number of likes
            on an article in the database
          </li>
          <li>Add an API gateway endpoint to invoke the new lambda</li>
          <li>
            Design and impelent a UI for displaying the number of likes on an
            article (using the created endpoint), and allowing users to like or
            remove their like from an article
          </li>
        </ol>
      </Section>
      <Section>
        <SubsectionHeader>
          Adding a likes column to the articles database
        </SubsectionHeader>
        <p>
          This was straightforward: I added a line to my model definition for
          the articles table, then ran{" "}
          <Code>
            alembic revision --autogenerate -m "Add likes to article table"
          </Code>{" "}
          to generate a migration file, then made sure it was correct, then ran{" "}
          <Code>alembic upgrade head</Code> to run the migration.
        </p>
        <p>
          By adding the following line to my Article model in sqlalchemy:
          <Code>likes: Mapped[int] = mapped_column(server_default="0")</Code>,
          alembic generated a migration file as follows:
          <SyntaxHighlighter language="python">
            {migrationCode}
          </SyntaxHighlighter>
        </p>
        <p>
          Then, I verified that the likes column was in the table by doing a
          simple select statement:
          <FullSizeImage
            src={`${process.env.REACT_APP_IMAGES_BASE_URL}/likes_column_in_db.jpeg`}
            alt="likes column added to database, shown through a sql statement"
          />
          And there it is! A likes column for each existing post with the
          default of 0 likes!
        </p>
      </Section>
      <Section>
        <SubsectionHeader>
          Implementing a lambda with connection to a postgres database
        </SubsectionHeader>
        <p>
          The next step is to create a lambda that increases or decreases the
          count of the likes on an article without it going below zero.
        </p>
      </Section>
      <Section>
        <SubsectionHeader>
          Adding an API gateway endpoint that invokes a lambda function
        </SubsectionHeader>
        <p></p>
      </Section>
      <Section>
        <SubsectionHeader>UI</SubsectionHeader>
        <p></p>
      </Section>
    </ArticleContentContainer>
  );
};

export default LikingArticles;
